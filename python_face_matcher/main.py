#!/usr/bin/env python3
"""
AK Parti Gen√ßlik Kollarƒ± Kamp Fotoƒüraf E≈üle≈ütirme Sistemi
ƒ∞ki B√∂l√ºml√º Y√∂netim Aray√ºz√º: Model Eƒüitimi ve ƒ∞stek ƒ∞≈üleme
"""

import sys
import os
import time
import traceback
import warnings
import numpy as np
import cv2
import torch
import shutil
import pickle
import json
import gc
import io
import requests
from datetime import datetime, timedelta
from threading import Thread, Lock
import queue
import urllib.parse
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders
import zipfile
import base64
from dotenv import load_dotenv
import logging
import psutil
import gc
import platform

# Google Drive API imports
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.auth.transport.requests import Request
from google.oauth2.service_account import Credentials
from google.oauth2 import service_account

# Load environment variables
load_dotenv()

# Detaylƒ± hata ayƒ±klama sistemi kurulumu
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - [%(threadName)s] - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('debug.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

def log_memory_usage(context=""):
    """Bellek kullanƒ±mƒ±nƒ± logla"""
    try:
        process = psutil.Process()
        memory_info = process.memory_info()
        memory_mb = memory_info.rss / 1024 / 1024
        logger.info(f"üß† BELLEK [{context}]: {memory_mb:.1f} MB (RSS: {memory_info.rss:,} bytes)")
        return memory_mb
    except Exception as e:
        logger.warning(f"Bellek √∂l√ß√ºm hatasƒ± [{context}]: {str(e)}")
        return 0

def log_system_info():
    """Sistem bilgilerini logla"""
    try:
        logger.info(f"üíª Sƒ∞STEM Bƒ∞LGƒ∞Sƒ∞:")
        logger.info(f"   Platform: {platform.platform()}")
        logger.info(f"   Python: {platform.python_version()}")
        logger.info(f"   ƒ∞≈ülemci: {platform.processor()}")
        
        # CPU ve Bellek bilgisi
        cpu_count = psutil.cpu_count()
        memory = psutil.virtual_memory()
        logger.info(f"   CPU √áekirdek: {cpu_count}")
        logger.info(f"   RAM: {memory.total / 1024**3:.1f} GB (Kullanƒ±labilir: {memory.available / 1024**3:.1f} GB)")
        
        # PyTorch ve CUDA bilgisi
        logger.info(f"   PyTorch: {torch.__version__}")
        logger.info(f"   CUDA: {'Evet' if torch.cuda.is_available() else 'Hayƒ±r'}")
        if torch.cuda.is_available():
            logger.info(f"   GPU: {torch.cuda.get_device_name(0)}")
            
    except Exception as e:
        logger.warning(f"Sistem bilgisi alƒ±namadƒ±: {str(e)}")

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, 
    QLabel, QPushButton, QListWidget, QListWidgetItem, QProgressBar,
    QGroupBox, QTextEdit, QFrame, QScrollArea,
    QGridLayout, QTableWidget, QTableWidgetItem,
    QHeaderView, QSizePolicy, QFileDialog, QMessageBox, QSplitter
)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPalette, QColor

from flask import Flask, request, jsonify
from insightface.app import FaceAnalysis

# Uyarƒ±larƒ± bastƒ±r
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=RuntimeWarning)

# Konfig√ºrasyon
CONFIG = {
    'WEB_API_URL': os.getenv('WEB_API_URL', 'https://your-replit-app.replit.app'),
    'PYTHON_API_PORT': int(os.getenv('PYTHON_API_PORT', 8080)),
    'EMAIL_FROM': os.getenv('EMAIL_FROM', 'kamp@akparti.org.tr'),
    'EMAIL_PASSWORD': os.getenv('EMAIL_PASSWORD', 'your_email_password'),
    'SMTP_SERVER': os.getenv('SMTP_SERVER', 'smtp.gmail.com'),
    'SMTP_PORT': int(os.getenv('SMTP_PORT', 587)),
    'SIMILARITY_THRESHOLD': float(os.getenv('SIMILARITY_THRESHOLD', '0.6')),
    'MAX_CONCURRENT_REQUESTS': int(os.getenv('MAX_CONCURRENT_REQUESTS', '3'))
}

# AK Parti renk ≈üemasƒ±
AK_COLORS = {
    'YELLOW': '#F59E0B',
    'BLUE': '#1E88E5',
    'WHITE': '#FFFFFF',
    'GRAY': '#6B7280',
    'LIGHT_GRAY': '#F9FAFB',
    'SUCCESS': '#10B981',
    'ERROR': '#EF4444'
}

# Global deƒüi≈ükenler
face_app = None
device_info = {'type': 'CPU', 'name': 'CPU Only', 'cuda_available': False}
trained_models = {}  # {camp_day_id: {'name': str, 'date': str, 'model_path': str, 'face_count': int}}
processing_queue = queue.Queue()
current_requests = {}
request_lock = Lock()
api_connection_status = {'connected': False, 'last_check': None}

def check_device_capabilities():
    """Device yeteneklerini kontrol et (GPU/CPU)"""
    global device_info
    
    # CUDA availability kontrol√º
    cuda_available = torch.cuda.is_available()
    
    if cuda_available:
        device_count = torch.cuda.device_count()
        gpu_name = torch.cuda.get_device_name(0) if device_count > 0 else "Unknown GPU"
        device_info = {
            'type': 'GPU',
            'name': gpu_name,
            'cuda_available': True,
            'device_count': device_count,
            'memory': f"{torch.cuda.get_device_properties(0).total_memory // 1024**3} GB" if device_count > 0 else "Unknown"
        }
        print(f"‚úÖ GPU Tespit Edildi: {gpu_name}")
        print(f"   PyTorch GPU Desteƒüi: Aktif")
        print(f"   GPU Belleƒüi: {device_info['memory']}")
    else:
        device_info = {
            'type': 'CPU',
            'name': 'CPU Only',
            'cuda_available': False
        }
        print("‚ö†Ô∏è  GPU Bulunamadƒ± - CPU Modu Kullanƒ±lacak")
    
    return device_info

def init_face_analysis():
    """Y√ºz analizi sistemini ba≈ülat"""
    global face_app, device_info
    
    try:
        # Device kontrol√º
        check_device_capabilities()
        
        # Provider listesi olu≈ütur
        providers = []
        if device_info['cuda_available']:
            providers.append('CUDAExecutionProvider')
            providers.append('CPUExecutionProvider')  # Fallback
            print("üöÄ GPU Modunda Ba≈ülatƒ±lƒ±yor...")
        else:
            providers.append('CPUExecutionProvider')
            print("üíª CPU Modunda Ba≈ülatƒ±lƒ±yor...")
        
        # FaceAnalysis ba≈ülat (orijinal GUI ile aynƒ± ≈üekilde)
        try:
            face_app = FaceAnalysis(name='buffalo_l', providers=providers)
            # GPU kullanƒ±lƒ±yorsa ctx_id=0 (GPU), deƒüilse ctx_id=-1 (CPU)
            ctx_id = 0 if device_info['cuda_available'] else -1
            face_app.prepare(ctx_id=ctx_id, det_size=(640, 640))
        except Exception:
            face_app = FaceAnalysis(name='buffalo_l', providers=['CPUExecutionProvider'])
            face_app.prepare(ctx_id=-1, det_size=(640, 640))
            device_info['type'] = 'CPU (Fallback)'
        
        print(f"‚úÖ Y√ºz Analizi Sistemi Hazƒ±r - {device_info['type']} ({device_info['name']})")
        return True
        
    except Exception as e:
        print(f"‚ùå Y√ºz analizi ba≈ülatma hatasƒ±: {str(e)}")
        return False

def load_trained_models():
    """Eƒüitilmi≈ü modelleri y√ºkle"""
    global trained_models
    models_dir = "./models"
    if not os.path.exists(models_dir):
        os.makedirs(models_dir)
        return
    
    trained_models = {}
    for item in os.listdir(models_dir):
        model_dir = os.path.join(models_dir, item)
        if os.path.isdir(model_dir):
            model_file = os.path.join(model_dir, "face_database.pkl")
            info_file = os.path.join(model_dir, "model_info.json")
            
            if os.path.exists(model_file) and os.path.exists(info_file):
                try:
                    with open(info_file, 'r', encoding='utf-8') as f:
                        model_info = json.load(f)
                    trained_models[item] = model_info
                except Exception as e:
                    print(f"Model info y√ºkleme hatasƒ± - {item}: {str(e)}")

def test_api_connection():
    """Web API baƒülantƒ±sƒ±nƒ± test et"""
    global api_connection_status
    try:
        response = requests.get(f"{CONFIG['WEB_API_URL']}/api/camp-days", timeout=5)
        if response.status_code == 200:
            api_connection_status = {
                'connected': True,
                'last_check': datetime.now()
            }
            return True
        else:
            api_connection_status = {
                'connected': False,
                'last_check': datetime.now()
            }
            return False
    except Exception as e:
        api_connection_status = {
            'connected': False,
            'last_check': datetime.now()
        }
        return False

def sync_models_to_web():
    """Eƒüitilmi≈ü modelleri web API'ye g√∂nder"""
    try:
        model_list = []
        for model_id, model_info in trained_models.items():
            model_list.append({
                'id': model_id,
                'name': model_info['name'],
                'trainedAt': model_info['date'],
                'faceCount': model_info['face_count']
            })
        
        response = requests.post(
            f"{CONFIG['WEB_API_URL']}/api/python/sync-models",
            json={'models': model_list},
            timeout=10
        )
        return response.status_code == 200
    except Exception as e:
        print(f"Model senkronizasyon hatasƒ±: {str(e)}")
        return False

class ModelTrainingWorker(QThread):
    """Model eƒüitimi worker thread'i"""
    progress = pyqtSignal(str, int)  # message, percentage
    finished = pyqtSignal(str, dict)  # model_id, model_info
    error = pyqtSignal(str)
    
    def __init__(self, model_id, model_name, photos_folder):
        super().__init__()
        self.model_id = model_id
        self.model_name = model_name
        self.photos_folder = photos_folder
    
    def run(self):
        try:
            self.progress.emit(f"Model eƒüitimi ba≈ülƒ±yor: {self.model_name}", 0)
            
            # Fotoƒüraf dosyalarƒ±nƒ± bul (t√ºm alt klas√∂rler dahil)
            image_files = []
            valid_extensions = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.webp')
            skipped_files = []
            
            print(f"üìÅ Klas√∂r taranƒ±yor: {self.photos_folder}")
            
            # T√ºm alt klas√∂rleri dahil ederek recursive arama
            for root, dirs, files in os.walk(self.photos_folder):
                print(f"  üìÇ Alt klas√∂r: {root} ({len(files)} dosya)")
                for file in files:
                    if file.lower().endswith(valid_extensions):
                        file_path = os.path.join(root, file)
                        
                        # Dosya var mƒ± ve okunabilir mi kontrol et
                        if os.path.exists(file_path) and os.path.isfile(file_path):
                            try:
                                # Dosya boyutu kontrol√º (minimum 1KB)
                                if os.path.getsize(file_path) > 1024:
                                    image_files.append(file_path)
                                else:
                                    skipped_files.append(f"{file} (√áok k√º√ß√ºk)")
                            except (OSError, UnicodeDecodeError) as e:
                                skipped_files.append(f"{file} (Eri≈üim hatasƒ±)")
                        else:
                            skipped_files.append(f"{file} (Bulunamadƒ±)")
            
            if skipped_files:
                print(f"‚ö†Ô∏è  Atlanan dosyalar ({len(skipped_files)} adet):")
                for skip in skipped_files[:5]:  # ƒ∞lk 5 tanesi
                    print(f"    - {skip}")
                if len(skipped_files) > 5:
                    print(f"    ... ve {len(skipped_files) - 5} dosya daha")
            
            print(f"‚úÖ Toplam ge√ßerli fotoƒüraf: {len(image_files)} adet")
            
            if not image_files:
                self.error.emit(f"Klas√∂rde hi√ß ge√ßerli fotoƒüraf bulunamadƒ±!\n\nKontrol edilenler:\n- Desteklenen formatlar: JPG, PNG, BMP, TIFF, WEBP\n- Minimum dosya boyutu: 1KB\n- Alt klas√∂rler dahil {len(skipped_files)} dosya atlendƒ±")
                return
            
            total_files = len(image_files)
            face_database = {}
            total_faces = 0
            
            self.progress.emit(f"Fotoƒüraflar analiz ediliyor... ({total_files} dosya)", 10)
            
            for idx, image_path in enumerate(image_files):
                try:
                    filename = os.path.basename(image_path)
                    
                    # G√ºvenli dosya okuma (encoding sorunlarƒ±nƒ± √ß√∂z)
                    try:
                        # Dosyayƒ± binary modda oku ve OpenCV'ye ge√ß
                        with open(image_path, 'rb') as f:
                            file_bytes = f.read()
                        
                        # Bytes'tan numpy array'e √ßevir
                        nparr = np.frombuffer(file_bytes, np.uint8)
                        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                        
                        if img is None:
                            print(f"‚ö†Ô∏è  Okunamayan resim: {filename}")
                            continue
                        
                        # Resim boyutu kontrol√º
                        height, width = img.shape[:2]
                        if height < 50 or width < 50:
                            print(f"‚ö†Ô∏è  √áok k√º√ß√ºk resim: {filename} ({width}x{height})")
                            continue
                            
                    except Exception as e:
                        print(f"‚ùå Dosya okuma hatasƒ± - {filename}: {str(e)}")
                        continue
                    
                    # Y√ºzleri tespit et
                    try:
                        faces = face_app.get(img) if face_app else None
                    except Exception as e:
                        print(f"‚ùå Y√ºz tespit hatasƒ± - {filename}: {str(e)}")
                        continue
                    
                    if faces and len(faces) > 0:
                        print(f"‚úÖ {filename}: {len(faces)} y√ºz tespit edildi")
                        
                        # Orijinal GUI formatƒ±nda kaydet - her y√ºz i√ßin ayrƒ± key
                        for face_idx, face in enumerate(faces):
                            try:
                                embedding = face.normed_embedding.astype('float32')
                                
                                # Orijinal GUI key formatƒ±
                                key = f"{image_path}||face_{face_idx}"
                                face_database[key] = {
                                    'embedding': embedding,
                                    'path': image_path,
                                    'bbox': face.bbox,
                                    'kps': face.kps
                                }
                                total_faces += 1
                            except Exception as e:
                                print(f"‚ö†Ô∏è  Y√ºz verisi i≈üleme hatasƒ± - {filename}: {str(e)}")
                                continue
                    else:
                        # Sessizce ge√ß, √ß√ºnk√º her fotoƒürafta y√ºz olmayabilir
                        pass
                    
                    # ƒ∞lerleme g√ºncelle
                    progress = 10 + int((idx + 1) / total_files * 80)
                    self.progress.emit(f"ƒ∞≈ülenen: {idx + 1}/{total_files} - {total_faces} y√ºz tespit edildi", progress)
                    
                except Exception as e:
                    print(f"‚ùå Genel hata - {os.path.basename(image_path)}: {str(e)}")
                    continue
            
            # Sonu√ßlarƒ± deƒüerlendirme
            total_photos_with_faces = len(face_database)
            
            print(f"\nüìä Eƒüitim √ñzeti:")
            print(f"  üìÅ Taranan dosya: {total_files}")
            print(f"  üñºÔ∏è Y√ºzl√º fotoƒüraf: {total_photos_with_faces}")
            print(f"  üë§ Toplam y√ºz: {total_faces}")
            
            if total_faces == 0:
                error_msg = f"Hi√ß y√ºz tespit edilemedi!\n\n" + \
                           f"Olasi Nedenler:\n" + \
                           f"- Fotoƒüraf kalitesi d√º≈ü√ºk (bulanƒ±k, kar≈üƒ±t d√º≈ü√ºk)\n" + \
                           f"- Y√ºz a√ßƒ±sƒ± uygun deƒüil (profil yerine √∂nden)\n" + \
                           f"- Aydƒ±nlatma yetersiz (karartƒ±lmƒ±≈ü)\n" + \
                           f"- Resim boyutu √ßok k√º√ß√ºk\n" + \
                           f"- Dosya formatƒ± desteklenmiyor\n\n" + \
                           f"Tarama Detaylarƒ±:\n" + \
                           f"- ƒ∞ncelenen dosya: {total_files}\n" + \
                           f"- Atlanan dosya: {len(skipped_files)}"
                self.error.emit(error_msg)
                return
            
            # Model dosyalarƒ±nƒ± kaydet
            self.progress.emit("Model kaydediliyor...", 90)
            
            model_dir = f"./models/{self.model_id}"
            os.makedirs(model_dir, exist_ok=True)
            
            # Face database'i kaydet
            model_file = os.path.join(model_dir, "face_database.pkl")
            with open(model_file, 'wb') as f:
                pickle.dump(face_database, f)
            
            # Model bilgilerini kaydet
            model_info = {
                'name': self.model_name,
                'date': datetime.now().isoformat(),
                'face_count': total_faces,
                'photo_count': len(face_database),
                'model_path': model_file
            }
            
            info_file = os.path.join(model_dir, "model_info.json")
            with open(info_file, 'w', encoding='utf-8') as f:
                json.dump(model_info, f, ensure_ascii=False, indent=2)
            
            self.progress.emit("Model ba≈üarƒ±yla eƒüitildi", 100)
            self.finished.emit(self.model_id, model_info)
            
        except Exception as e:
            print(f"‚ùå Kritik hata: {str(e)}")
            import traceback
            traceback.print_exc()
            self.error.emit(f"Model eƒüitimi hatasƒ±: {str(e)}\n\nDetaylar konsola yazdƒ±rƒ±ldƒ±.")

class PhotoMatchingWorker(QThread):
    """Fotoƒüraf e≈üle≈ütirme worker thread'i - Memory-safe implementation with debugging"""
    progress = pyqtSignal(str, int, str)  # message, percentage, tc_number
    finished = pyqtSignal(str, list)  # tc_number, matched_photos
    error = pyqtSignal(str, str)  # tc_number, error_message
    
    def __init__(self, tc_number, reference_embeddings, email, selected_models):
        super().__init__()
        self.tc_number = tc_number
        self.reference_embeddings = [np.array(emb, dtype=np.float32) for emb in reference_embeddings]  # Pre-convert to numpy
        self.email = email
        self.selected_models = selected_models
        self._should_stop = False
        self.start_time = None
        self.debug_counter = 0
        
        # Ba≈ülangƒ±√ß loglarƒ±
        logger.info(f"üöÄ E≈ûLE≈ûTIRME BA≈ûLAT - TC: {tc_number}")
        logger.info(f"   üìß Email: {email}")
        logger.info(f"   ü§ñ Se√ßilen modeller: {selected_models}")
        logger.info(f"   üìä Referans embedding sayƒ±sƒ±: {len(reference_embeddings)}")
        log_memory_usage("PhotoMatchingWorker __init__")
    
    def run(self):
        # Initialize variables at the start to ensure they exist for cleanup
        matched_photos = []
        all_photos = {}
        processed = 0
        total_photos = 0
        self.start_time = time.time()
        
        try:
            logger.info(f"üîÑ E≈ûLE≈ûTIRME RUN BA≈ûLADI - TC: {self.tc_number}")
            log_memory_usage("Run ba≈ülangƒ±cƒ±")
            log_system_info()
            
            self.progress.emit(f"E≈üle≈ütirme ba≈ülƒ±yor", 0, self.tc_number)
            
            # Se√ßilen modellerdeki t√ºm fotoƒüraflarƒ± birle≈ütir
            logger.info(f"üìÅ MODEL Y√úKLEME BA≈ûLADI - {len(self.selected_models)} model")
            
            for idx, model_id in enumerate(self.selected_models):
                if self._should_stop:
                    logger.info(f"‚õî DURDURMA ƒ∞STEƒûƒ∞ - Model y√ºkleme iptal edildi")
                    return
                    
                model_file = f"./models/{model_id}/face_database.pkl"
                logger.info(f"üìÇ Model y√ºkleniyor [{idx+1}/{len(self.selected_models)}]: {model_id}")
                
                if os.path.exists(model_file):
                    try:
                        file_size = os.path.getsize(model_file) / 1024 / 1024  # MB
                        logger.info(f"   üìè Dosya boyutu: {file_size:.1f} MB")
                        
                        with open(model_file, 'rb') as f:
                            model_data = pickle.load(f)
                        
                        model_photo_count = 0
                        model_face_count = len(model_data)
                        logger.info(f"   üë§ Model'de {model_face_count} y√ºz verisi var")
                        
                        # Memory-efficient processing
                        for key_idx, (key, photo_data) in enumerate(model_data.items()):
                            if self._should_stop:
                                logger.info(f"‚õî DURDURMA ƒ∞STEƒûƒ∞ - Model i≈üleme iptal edildi")
                                return
                                
                            try:
                                # Orijinal GUI key formatƒ±: "path||face_N"
                                if '||face_' in key:
                                    photo_path = photo_data['path']
                                    if photo_path not in all_photos:
                                        all_photos[photo_path] = []
                                        model_photo_count += 1
                                    # Pre-convert embedding to numpy with proper dtype
                                    photo_data_copy = photo_data.copy()
                                    photo_data_copy['embedding'] = np.array(photo_data['embedding'], dtype=np.float32)
                                    all_photos[photo_path].append(photo_data_copy)
                                else:
                                    # Fallback - eski format
                                    all_photos[key] = [photo_data] if isinstance(photo_data, dict) else photo_data
                                    model_photo_count += 1
                                    
                                # Her 1000 y√ºzde bir bellek durumu logla
                                if key_idx > 0 and key_idx % 1000 == 0:
                                    log_memory_usage(f"Model i≈üleme - {key_idx}/{model_face_count}")
                                    
                            except Exception as e:
                                logger.error(f"‚ùå Y√ºz verisi i≈üleme hatasƒ± - Key: {key[:50]}...: {str(e)}")
                                continue
                        
                        # Clear model_data immediately to free memory
                        del model_data
                        gc.collect()  # Force garbage collection
                        
                        logger.info(f"‚úÖ Model y√ºklendi: {model_id} - {model_photo_count} fotoƒüraf")
                        log_memory_usage(f"Model {model_id} y√ºklendi")
                        
                        self.progress.emit(f"Model y√ºklendi: {model_id}", 10, self.tc_number)
                    except Exception as e:
                        logger.error(f"‚ùå Model y√ºkleme hatasƒ± - {model_id}: {str(e)}")
                        logger.error(f"   Stack trace: {traceback.format_exc()}")
                else:
                    logger.warning(f"‚ö†Ô∏è Model dosyasƒ± bulunamadƒ±: {model_file}")
            
            total_photos = len(all_photos)
            logger.info(f"üìä TOPLAM FOTOƒûRAF: {total_photos}")
            log_memory_usage("T√ºm modeller y√ºklendi")
            
            if total_photos == 0:
                logger.error(f"‚ùå Hi√ß fotoƒüraf bulunamadƒ± - TC: {self.tc_number}")
                self.error.emit(self.tc_number, "Se√ßilen modellerde fotoƒüraf bulunamadƒ±")
                return
            
            processed = 0
            progress_update_interval = max(1, total_photos // 20)  # Maximum 20 progress updates
            logger.info(f"üîÑ E≈ûLE≈ûTIRME BA≈ûLIYOR - {total_photos} fotoƒüraf i≈ülenecek")
            
            for photo_idx, (photo_path, face_list) in enumerate(all_photos.items()):
                if self._should_stop:
                    logger.info(f"‚õî DURDURMA ƒ∞STEƒûƒ∞ - E≈üle≈ütirme iptal edildi [{processed}/{total_photos}]")
                    break
                    
                try:
                    best_similarity = 0.0
                    best_face_data = None
                    
                    # Her 100 fotoƒürafta bir detaylƒ± log
                    if photo_idx % 100 == 0:
                        logger.info(f"üîç Fotoƒüraf i≈üleniyor [{photo_idx+1}/{total_photos}]: {os.path.basename(photo_path)}")
                        log_memory_usage(f"Fotoƒüraf {photo_idx+1}/{total_photos}")
                    
                    # Find best matching face in this photo
                    for face_idx, face_data in enumerate(face_list):
                        try:
                            photo_embedding = face_data['embedding']  # Already converted to numpy
                            
                            # Check against all reference embeddings
                            for ref_idx, ref_embedding in enumerate(self.reference_embeddings):
                                try:
                                    similarity = self.calculate_similarity(ref_embedding, photo_embedding)
                                    
                                    if similarity > best_similarity and similarity > CONFIG['SIMILARITY_THRESHOLD']:
                                        best_similarity = similarity
                                        best_face_data = face_data
                                        
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è Similarity hesaplama hatasƒ± [foto:{photo_idx}, y√ºz:{face_idx}, ref:{ref_idx}]: {str(e)}")
                                    continue
                                    
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è Y√ºz verisi hatasƒ± [foto:{photo_idx}, y√ºz:{face_idx}]: {str(e)}")
                            continue
                    
                    # Add best match if found
                    if best_face_data is not None:
                        try:
                            matched_photos.append({
                                'photo_path': photo_path,
                                'similarity': float(best_similarity),
                                'bbox': best_face_data['bbox'].tolist() if hasattr(best_face_data['bbox'], 'tolist') else best_face_data['bbox']
                            })
                            
                            # ƒ∞lk 5 e≈üle≈ümeyi logla
                            if len(matched_photos) <= 5:
                                logger.info(f"‚úÖ E≈üle≈üme bulundu #{len(matched_photos)}: {os.path.basename(photo_path)} (Benzerlik: {best_similarity:.3f})")
                                
                        except Exception as e:
                            logger.error(f"‚ùå E≈üle≈üme kaydetme hatasƒ± - {photo_path}: {str(e)}")
                    
                    processed += 1
                    
                    # Update progress less frequently to avoid signal spam
                    if processed % progress_update_interval == 0 or processed == total_photos:
                        progress = int((processed / total_photos) * 100)
                        elapsed_time = time.time() - self.start_time
                        
                        logger.info(f"üìà ƒ∞LERLEME: {processed}/{total_photos} ({progress}%) - {elapsed_time:.1f}s - {len(matched_photos)} e≈üle≈üme")
                        
                        # %95'den sonra her adƒ±mƒ± logla (crash risk y√ºksek)
                        if progress >= 95:
                            log_memory_usage(f"Kritik nokta - {processed}/{total_photos}")
                            logger.info(f"üö® KRƒ∞Tƒ∞K NOKTA: %{progress} - Kalan: {total_photos - processed} fotoƒüraf")
                        
                        self.progress.emit(f"E≈üle≈ütirme: {processed}/{total_photos}", 
                                         progress, self.tc_number)
                    
                except Exception as e:
                    logger.error(f"‚ùå Fotoƒüraf e≈üle≈ütirme hatasƒ± - {photo_path}: {str(e)}")
                    logger.error(f"   Stack trace: {traceback.format_exc()}")
                    processed += 1
                    continue
            
            # Clear all_photos to free memory before sorting
            logger.info(f"üßπ Bellek temizleniyor - all_photos siliniyor")
            del all_photos
            gc.collect()  # Force garbage collection
            log_memory_usage("all_photos silindi")
            
            if not self._should_stop and matched_photos:
                logger.info(f"üìä SONU√á HAZIRLAMA: {len(matched_photos)} e≈üle≈üme bulundu")
                
                # Memory-efficient sorting
                try:
                    logger.info(f"üîÄ Sonu√ßlar sƒ±ralanƒ±yor...")
                    matched_photos.sort(key=lambda x: x['similarity'], reverse=True)
                    
                    # En iyi 3 sonucu logla
                    for i, match in enumerate(matched_photos[:3]):
                        logger.info(f"   #{i+1}: {os.path.basename(match['photo_path'])} (Benzerlik: {match['similarity']:.3f})")
                    
                    elapsed_time = time.time() - self.start_time
                    logger.info(f"üéâ E≈ûLE≈ûTIRME TAMAMLANDI - {elapsed_time:.1f}s - TC: {self.tc_number}")
                    log_memory_usage("E≈üle≈ütirme tamamlandƒ±")
                    
                    self.progress.emit("E≈üle≈ütirme tamamlandƒ±", 100, self.tc_number)
                    self.finished.emit(self.tc_number, matched_photos)
                    
                except Exception as e:
                    logger.error(f"‚ùå Sonu√ß sƒ±ralama hatasƒ±: {str(e)}")
                    logger.error(f"   Stack trace: {traceback.format_exc()}")
                    self.error.emit(self.tc_number, f"Sonu√ß sƒ±ralama hatasƒ±: {str(e)}")
            elif not self._should_stop:
                elapsed_time = time.time() - self.start_time
                logger.info(f"‚ÑπÔ∏è E≈üle≈üme bulunamadƒ± - {elapsed_time:.1f}s - TC: {self.tc_number}")
                self.finished.emit(self.tc_number, [])
            
        except Exception as e:
            elapsed_time = time.time() - self.start_time if self.start_time else 0
            logger.error(f"üí• KRƒ∞Tƒ∞K HATA - TC: {self.tc_number} - {elapsed_time:.1f}s")
            logger.error(f"   Hata mesajƒ±: {str(e)}")
            logger.error(f"   ƒ∞≈ülenen fotoƒüraf: {processed}/{total_photos if 'total_photos' in locals() else 'bilinmiyor'}")
            logger.error(f"   Bulunan e≈üle≈üme: {len(matched_photos) if 'matched_photos' in locals() else 'bilinmiyor'}")
            logger.error(f"   Stack trace: {traceback.format_exc()}")
            log_memory_usage("Kritik hata anƒ±nda")
            
            # Sistem durumu
            try:
                process = psutil.Process()
                logger.error(f"   CPU kullanƒ±mƒ±: {process.cpu_percent()}%")
                logger.error(f"   Bellek kullanƒ±mƒ±: {process.memory_percent():.1f}%")
            except:
                pass
            
            self.error.emit(self.tc_number, f"E≈üle≈ütirme hatasƒ±: {str(e)}")
        finally:
            # Cleanup reference embeddings to free memory
            logger.info(f"üßπ CLEANUP BA≈ûLADI - TC: {self.tc_number}")
            try:
                if hasattr(self, 'reference_embeddings'):
                    del self.reference_embeddings
                    logger.info(f"   ‚úÖ reference_embeddings silindi")
                gc.collect()
                log_memory_usage("Cleanup sonrasƒ±")
                logger.info(f"üèÅ CLEANUP TAMAMLANDI - TC: {self.tc_number}")
            except Exception as cleanup_error:
                logger.error(f"‚ùå Cleanup hatasƒ±: {str(cleanup_error)}")
    
    def stop(self):
        """Worker'ƒ± g√ºvenli ≈üekilde durdur"""
        logger.info(f"üõë DURDURMA ƒ∞STEƒûƒ∞ - TC: {self.tc_number}")
        self._should_stop = True
    
    def calculate_similarity(self, embedding1, embedding2):
        """Memory-safe dot product similarity hesapla (normalize edilmi≈ü vekt√∂rler i√ßin)"""
        try:
            # Debug counter'ƒ± artƒ±r
            self.debug_counter += 1
            
            # Her 10000 hesaplamada bir debug
            if self.debug_counter % 10000 == 0:
                logger.debug(f"üî¢ Similarity hesaplamasƒ±: {self.debug_counter}")
            
            # Ensure both are float32 numpy arrays for consistency
            if not isinstance(embedding1, np.ndarray):
                embedding1 = np.array(embedding1, dtype=np.float32)
            if not isinstance(embedding2, np.ndarray):
                embedding2 = np.array(embedding2, dtype=np.float32)
            
            # Use optimized dot product
            similarity = float(np.dot(embedding1, embedding2))
            return similarity
        except Exception as e:
            print(f"Similarity calculation error: {str(e)}")
            return 0.0

class GoogleDriveSender(QThread):
    """Google Drive ile fotoƒüraf g√∂nderme worker thread'i"""
    progress = pyqtSignal(str, str)  # tc_number, message
    finished = pyqtSignal(str, bool)  # tc_number, success
    
    def __init__(self, tc_number, email, matched_photos):
        super().__init__()
        self.tc_number = tc_number
        self.email = email
        self.matched_photos = matched_photos
        self.uploaded_photos = []  # Y√ºklenen fotoƒüraflarƒ±n listesi
    
    def get_drive_service(self):
        """Google Drive API servisini ba≈ülat"""
        try:
            # Service account key dosyasƒ± yolu
            service_account_file = os.getenv('GOOGLE_SERVICE_ACCOUNT_FILE', 'service-account-key.json')
            
            if not os.path.exists(service_account_file):
                raise Exception(f"Google Drive servis hesabƒ± dosyasƒ± bulunamadƒ±: {service_account_file}")
            
            # Credentials y√ºkle
            credentials = service_account.Credentials.from_service_account_file(
                service_account_file,
                scopes=['https://www.googleapis.com/auth/drive']
            )
            
            # Drive servisi olu≈ütur
            service = build('drive', 'v3', credentials=credentials)
            return service
            
        except Exception as e:
            logger.error(f"Google Drive servisi ba≈ülatƒ±lamadƒ±: {str(e)}")
            raise e
    
    def create_drive_folder(self, service, folder_name, parent_folder_id=None):
        """Google Drive'da klas√∂r olu≈ütur"""
        try:
            folder_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder'
            }
            
            if parent_folder_id:
                folder_metadata['parents'] = [parent_folder_id]
            
            folder = service.files().create(body=folder_metadata, fields='id').execute()
            return folder.get('id')
            
        except Exception as e:
            logger.error(f"Klas√∂r olu≈üturma hatasƒ±: {str(e)}")
            return None
    
    def upload_to_google_drive(self, photo_path, photo_index):
        """Fotoƒürafƒ± Google Drive'a y√ºkle ve payla≈üƒ±m linki d√∂nd√ºr"""
        try:
            # Google Drive servisi
            service = self.get_drive_service()
            
            # Dosya adƒ± ve yolu hazƒ±rla
            original_name = os.path.basename(photo_path)
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            drive_filename = f"{timestamp}_{photo_index:03d}_{original_name}"
            
            logger.info(f"üì§ Google Drive'a y√ºkleniyor: {drive_filename}")
            
            # Ana klas√∂r√º kontrol et/olu≈ütur
            main_folder_name = f"AKParti_Kamp_Fotograflari"
            query = f"name='{main_folder_name}' and mimeType='application/vnd.google-apps.folder'"
            results = service.files().list(q=query, fields='files(id, name)').execute()
            items = results.get('files', [])
            
            if items:
                main_folder_id = items[0]['id']
                logger.info(f"üìÅ Ana klas√∂r bulundu: {main_folder_id}")
            else:
                main_folder_id = self.create_drive_folder(service, main_folder_name)
                logger.info(f"üìÅ Ana klas√∂r olu≈üturuldu: {main_folder_id}")
            
            # TC numarasƒ± klas√∂r√ºn√º kontrol et/olu≈ütur
            tc_folder_name = f"TC_{self.tc_number}"
            query = f"name='{tc_folder_name}' and '{main_folder_id}' in parents and mimeType='application/vnd.google-apps.folder'"
            results = service.files().list(q=query, fields='files(id, name)').execute()
            items = results.get('files', [])
            
            if items:
                tc_folder_id = items[0]['id']
                logger.info(f"üìÅ TC klas√∂r√º bulundu: {tc_folder_id}")
            else:
                tc_folder_id = self.create_drive_folder(service, tc_folder_name, main_folder_id)
                logger.info(f"üìÅ TC klas√∂r√º olu≈üturuldu: {tc_folder_id}")
            
            # Dosyayƒ± y√ºkle
            file_metadata = {
                'name': drive_filename,
                'parents': [tc_folder_id]
            }
            
            media = MediaFileUpload(photo_path, mimetype='image/jpeg')
            file = service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id,webViewLink,webContentLink'
            ).execute()
            
            file_id = file.get('id')
            
            # Dosyayƒ± link sahibine a√ßƒ±k yap (sadece dosya bazƒ±nda - G√úVENLƒ∞!)
            permission = {
                'type': 'anyone',
                'role': 'reader'
            }
            service.permissions().create(
                fileId=file_id,
                body=permission
            ).execute()
            
            # ƒ∞ndirme linki olu≈ütur
            download_link = f"https://drive.google.com/uc?id={file_id}&export=download"
            view_link = file.get('webViewLink')
            
            logger.info(f"‚úÖ Google Drive'a y√ºklendi: {original_name}")
            return {
                'original_name': original_name,
                'download_url': download_link,
                'view_url': view_link,
                'file_id': file_id,
                'upload_success': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå Google Drive y√ºkleme hatasƒ± [{photo_index}]: {str(e)}")
            return {
                'original_name': os.path.basename(photo_path) if os.path.exists(photo_path) else 'unknown',
                'download_url': None,
                'view_url': None,
                'file_id': None,
                'upload_success': False,
                'error': str(e)
            }
    
    def run(self):
        try:
            logger.info(f"‚òÅÔ∏è GOOGLE DRIVE G√ñNDERƒ∞Mƒ∞ BA≈ûLADI - TC: {self.tc_number}")
            logger.info(f"   üìä E≈üle≈üen fotoƒüraf: {len(self.matched_photos)}")
            log_memory_usage("Google Drive ba≈ülangƒ±√ß")
            
            self.progress.emit(self.tc_number, "Fotoƒüraflar Google Drive'a y√ºkleniyor...")
            
            # T√ºm fotoƒüraflarƒ± Google Drive'a y√ºkle
            successful_uploads = []
            failed_uploads = []
            
            for idx, match in enumerate(self.matched_photos):
                try:
                    photo_path = match['photo_path']
                    logger.info(f"üì§ Fotoƒüraf y√ºkleniyor [{idx+1}/{len(self.matched_photos)}]: {os.path.basename(photo_path)}")
                    
                    # ƒ∞lerleme bildirimi
                    self.progress.emit(self.tc_number, f"Y√ºkleniyor ({idx+1}/{len(self.matched_photos)}): {os.path.basename(photo_path)}")
                    
                    # Dosya varlƒ±ƒüƒ± kontrol√º
                    if not os.path.exists(photo_path):
                        logger.warning(f"‚ö†Ô∏è Dosya bulunamadƒ±: {photo_path}")
                        failed_uploads.append({
                            'original_name': os.path.basename(photo_path),
                            'error': 'Dosya bulunamadƒ±'
                        })
                        continue
                    
                    # Fotoƒürafƒ± Google Drive'a y√ºkle
                    upload_result = self.upload_to_google_drive(photo_path, idx + 1)
                    
                    if upload_result['upload_success']:
                        successful_uploads.append(upload_result)
                        logger.info(f"‚úÖ Ba≈üarƒ±lƒ± [{idx+1}/{len(self.matched_photos)}]: {upload_result['original_name']}")
                    else:
                        failed_uploads.append(upload_result)
                        logger.error(f"‚ùå Ba≈üarƒ±sƒ±z [{idx+1}/{len(self.matched_photos)}]: {upload_result.get('error', 'Bilinmeyen hata')}")
                    
                    # Her 5 fotoƒürafta bellek durumu
                    if idx % 5 == 0:
                        log_memory_usage(f"Google Drive y√ºkleme - {idx+1}/{len(self.matched_photos)}")
                        
                except Exception as photo_error:
                    logger.error(f"‚ùå Fotoƒüraf y√ºkleme hatasƒ± [{idx+1}]: {str(photo_error)}")
                    failed_uploads.append({
                        'original_name': os.path.basename(match.get('photo_path', 'unknown')),
                        'error': str(photo_error)
                    })
                    continue
            
            logger.info(f"üìä Y√ºkleme √∂zeti: {len(successful_uploads)} ba≈üarƒ±lƒ±, {len(failed_uploads)} ba≈üarƒ±sƒ±z")
            
            if not successful_uploads:
                raise Exception("Hi√ßbir fotoƒüraf y√ºklenemedi")
            
            # E-posta ile Google Drive linklerini g√∂nder
            self.progress.emit(self.tc_number, "Google Drive linkleri e-posta ile g√∂nderiliyor...")
            logger.info(f"üì® E-posta hazƒ±rlanƒ±yor: {self.email}")
            
            try:
                msg = MIMEMultipart()
                msg['From'] = CONFIG['EMAIL_FROM']
                msg['To'] = self.email
                msg['Subject'] = f"AK Parti Gen√ßlik Kollarƒ± Kamp Fotoƒüraflarƒ±nƒ±z - {self.tc_number}"
                
                # E-posta i√ßeriƒüi hazƒ±rla
                photo_links = ""
                for idx, photo in enumerate(successful_uploads):
                    photo_links += f"{idx+1:2d}. {photo['original_name']}\n    ƒ∞ndirme linki: {photo['download_url']}\n    G√∂r√ºnt√ºleme linki: {photo['view_url']}\n\n"
                
                failed_info = ""
                if failed_uploads:
                    failed_info = f"\n\n‚ö†Ô∏è Y√ºklenemeyen fotoƒüraflar ({len(failed_uploads)} adet):\n"
                    for failed in failed_uploads[:5]:  # Sadece ilk 5'ini g√∂ster
                        failed_info += f"   ‚Ä¢ {failed['original_name']} - {failed.get('error', 'Bilinmeyen hata')}\n"
                    if len(failed_uploads) > 5:
                        failed_info += f"   ‚Ä¢ ... ve {len(failed_uploads) - 5} fotoƒüraf daha\n"
                
                body = f"""
Sayƒ±n Katƒ±lƒ±mcƒ±mƒ±z,

AK Parti Gen√ßlik Kollarƒ± ƒ∞rade, ƒ∞stikamet ve ƒ∞sti≈üare Kampƒ± fotoƒüraflarƒ±nƒ±z hazƒ±r!

üìä √ñZET:
   ‚Ä¢ Tespit edilen fotoƒüraf sayƒ±sƒ±: {len(self.matched_photos)}
   ‚Ä¢ Ba≈üarƒ±yla y√ºklenen: {len(successful_uploads)}
   ‚Ä¢ TC Kimlik No: {self.tc_number}

üîó FOTOƒûRAF ƒ∞NDƒ∞RME Lƒ∞NKLERƒ∞:

{photo_links}
üí° ƒ∞PUCU: 
   ‚Ä¢ ƒ∞ndirme linkine tƒ±klayarak fotoƒürafƒ± doƒürudan indirebilirsiniz
   ‚Ä¢ G√∂r√ºnt√ºleme linkine tƒ±klayarak Google Drive'da g√∂rebilirsiniz
   ‚Ä¢ Linkler kalƒ±cƒ± olarak aktif kalacaktƒ±r{failed_info}

Saygƒ±larƒ±mƒ±zla,
AK Parti Gen√ßlik Kollarƒ± Genel Sekreterliƒüi
                """
                
                msg.attach(MIMEText(body, 'plain', 'utf-8'))
                logger.info(f"üìù E-posta metni hazƒ±rlandƒ± ({len(successful_uploads)} Google Drive linki)")
                
                # SMTP g√ºvenli g√∂nderim
                logger.info(f"üì§ SMTP baƒülantƒ±sƒ± kuruluyor: {CONFIG['SMTP_SERVER']}:{CONFIG['SMTP_PORT']}")
                
                server = None
                try:
                    server = smtplib.SMTP(CONFIG['SMTP_SERVER'], CONFIG['SMTP_PORT'])
                    server.starttls()
                    server.login(CONFIG['EMAIL_FROM'], CONFIG['EMAIL_PASSWORD'])
                    
                    logger.info(f"üìß E-posta g√∂nderiliyor...")
                    server.send_message(msg)
                    logger.info(f"‚úÖ E-posta ba≈üarƒ±yla g√∂nderildi")
                    
                except Exception as smtp_error:
                    logger.error(f"‚ùå SMTP g√∂nderim hatasƒ±: {str(smtp_error)}")
                    raise Exception(f"E-posta g√∂nderim hatasƒ±: {str(smtp_error)}")
                finally:
                    if server:
                        try:
                            server.quit()
                        except:
                            pass
                
            except Exception as email_error:
                logger.error(f"‚ùå E-posta hazƒ±rlama hatasƒ±: {str(email_error)}")
                raise email_error
            
            log_memory_usage("Google Drive tamamlandƒ±")
            logger.info(f"üéâ GOOGLE DRIVE G√ñNDERƒ∞Mƒ∞ TAMAMLANDI - TC: {self.tc_number}")
            self.finished.emit(self.tc_number, True)
            
        except Exception as e:
            # Kritik hata durumunda detaylƒ± log
            logger.error(f"üí• GOOGLE DRIVE KRƒ∞Tƒ∞K HATA - TC: {self.tc_number}")
            logger.error(f"   Hata mesajƒ±: {str(e)}")
            logger.error(f"   Stack trace: {traceback.format_exc()}")
            log_memory_usage("Google Drive hata anƒ±nda")
            
            self.finished.emit(self.tc_number, False)
            print(f"Google Drive g√∂nderme hatasƒ±: {str(e)}")
            
        finally:
            # Final cleanup
            try:
                gc.collect()
                logger.info(f"üßπ Google Drive worker cleanup tamamlandƒ± - TC: {self.tc_number}")
            except:
                pass

class PythonAPIServer:
    """Python API Server - Web'den gelen istekleri kar≈üƒ±lar"""
    
    def __init__(self, main_window):
        self.main_window = main_window
        self.app = Flask(__name__)
        self.setup_routes()
    
    def setup_routes(self):
        """API rotalarƒ±nƒ± kur"""
        
        @self.app.route('/api/health', methods=['GET'])
        def health_check():
            return jsonify({
                'status': 'healthy',
                'timestamp': datetime.now().isoformat(),
                'trained_models': len(trained_models),
                'api_connection': api_connection_status['connected'],
                'device': device_info
            })
        
        @self.app.route('/api/process-photo-request', methods=['POST'])
        def process_photo_request():
            try:
                data = request.get_json()
                tc_number = data.get('tcNumber')
                email = data.get('email')
                reference_photos = data.get('referencePhotos', [])
                selected_models = data.get('selectedModels', [])
                
                if not tc_number or not email:
                    return jsonify({'error': 'TC number and email required'}), 400
                
                if not selected_models:
                    return jsonify({'error': 'En az bir model se√ßmelisiniz'}), 400
                
                # ƒ∞steƒüi ana pencereye ilet
                self.main_window.process_photo_request({
                    'tcNumber': tc_number,
                    'email': email,
                    'referencePhotos': reference_photos,
                    'selectedModels': selected_models,
                    'timestamp': datetime.now().isoformat()
                })
                
                return jsonify({
                    'message': 'Request received successfully',
                    'tcNumber': tc_number
                })
                
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        
        @self.app.route('/api/process-photos', methods=['POST'])
        def process_photos():
            """Web sitesinden gelen fotoƒüraf i≈üleme istekleri"""
            try:
                data = request.get_json()
                tc_number = data.get('tcNumber')
                email = data.get('email')
                selected_camp_days = data.get('selectedCampDays', [])
                uploaded_files_count = data.get('uploadedFilesCount', 0)
                
                if not tc_number or not email:
                    return jsonify({'error': 'TC kimlik numarasƒ± ve e-posta gerekli'}), 400
                
                if not selected_camp_days:
                    return jsonify({'error': 'En az bir kamp g√ºn√º se√ßmelisiniz'}), 400
                
                # Se√ßilen kamp g√ºnlerini model isimlerine √ßevir
                selected_models = []
                for camp_day_id in selected_camp_days:
                    if camp_day_id in trained_models:
                        selected_models.append(camp_day_id)
                
                if not selected_models:
                    return jsonify({'error': 'Se√ßilen kamp g√ºnleri i√ßin eƒüitilmi≈ü model bulunamadƒ±'}), 400
                
                # ƒ∞steƒüi ana pencereye ilet
                self.main_window.process_photo_request({
                    'tcNumber': tc_number,
                    'email': email,
                    'selectedModels': selected_models,
                    'selectedCampDays': selected_camp_days,
                    'uploadedFilesCount': uploaded_files_count,
                    'timestamp': datetime.now().isoformat(),
                    'source': 'web_api'
                })
                
                print(f"üì© Web'den fotoƒüraf i≈üleme isteƒüi alƒ±ndƒ±: {tc_number} ({len(selected_models)} model)")
                
                return jsonify({
                    'message': 'Fotoƒüraf i≈üleme isteƒüi ba≈üarƒ±yla alƒ±ndƒ±',
                    'tcNumber': tc_number,
                    'selectedModelsCount': len(selected_models),
                    'status': 'processing'
                })
                
            except Exception as e:
                print(f"‚ùå Fotoƒüraf i≈üleme isteƒüi hatasƒ±: {str(e)}")
                return jsonify({'error': str(e)}), 500
    
    def start_server(self):
        """API server'ƒ± ba≈ülat"""
        try:
            server_thread = Thread(
                target=lambda: self.app.run(
                    host='0.0.0.0', 
                    port=CONFIG['PYTHON_API_PORT'], 
                    debug=False
                ),
                daemon=True
            )
            server_thread.start()
            print(f"Python API Server ba≈ülatƒ±ldƒ± - Port: {CONFIG['PYTHON_API_PORT']}")
        except Exception as e:
            print(f"API Server ba≈ülatma hatasƒ±: {str(e)}")

class ModelTrainingSection(QWidget):
    """Model Eƒüitimi B√∂l√ºm√º"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.refresh_models()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # Ba≈ülƒ±k ve sistem bilgisi
        header_layout = QHBoxLayout()
        
        title = QLabel("Model Eƒüitimi")
        title.setFont(QFont("Segoe UI", 18, QFont.Bold))
        title.setStyleSheet(f"color: {AK_COLORS['BLUE']}; margin-bottom: 10px;")
        header_layout.addWidget(title)
        
        # Device bilgisi
        device_label = QLabel(f"üñ•Ô∏è {device_info['type']}: {device_info['name']}")
        device_label.setFont(QFont("Segoe UI", 11))
        if device_info['cuda_available']:
            device_label.setStyleSheet(f"color: {AK_COLORS['SUCCESS']}; font-weight: bold;")
        else:
            device_label.setStyleSheet(f"color: {AK_COLORS['WARNING']}; font-weight: bold;")
        header_layout.addStretch()
        header_layout.addWidget(device_label)
        
        layout.addLayout(header_layout)
        
        # Yeni model eƒüitimi grubu
        train_group = QGroupBox("Yeni Model Eƒüit")
        train_group.setStyleSheet(f"""
            QGroupBox {{
                font-weight: bold;
                border: 2px solid {AK_COLORS['GRAY']};
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
            }}
        """)
        train_layout = QVBoxLayout(train_group)
        
        # Model adƒ±
        self.model_name_input = QTextEdit()
        self.model_name_input.setMaximumHeight(60)
        self.model_name_input.setPlaceholderText("Model adƒ±nƒ± girin (√∂rn: 1. G√ºn - A√ßƒ±lƒ±≈ü)")
        self.model_name_input.setStyleSheet("border: 1px solid #ddd; border-radius: 4px; padding: 8px;")
        train_layout.addWidget(QLabel("Model Adƒ±:"))
        train_layout.addWidget(self.model_name_input)
        
        # Fotoƒüraf klas√∂r√º se√ßimi
        folder_layout = QHBoxLayout()
        self.folder_path_label = QLabel("Fotoƒüraf klas√∂r√º se√ßilmedi")
        self.folder_path_label.setStyleSheet("color: #666; font-style: italic;")
        self.select_folder_btn = QPushButton("Klas√∂r Se√ß")
        self.select_folder_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {AK_COLORS['BLUE']};
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #1565C0;
            }}
        """)
        self.select_folder_btn.clicked.connect(self.select_folder)
        
        folder_layout.addWidget(self.folder_path_label, 1)
        folder_layout.addWidget(self.select_folder_btn)
        train_layout.addWidget(QLabel("Fotoƒüraf Klas√∂r√º:"))
        train_layout.addLayout(folder_layout)
        
        # Eƒüitim butonu
        self.train_btn = QPushButton("Model Eƒüit")
        self.train_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {AK_COLORS['YELLOW']};
                color: white;
                border: none;
                border-radius: 6px;
                padding: 12px;
                font-size: 14px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #D97706;
            }}
            QPushButton:disabled {{
                background-color: #ddd;
                color: #999;
            }}
        """)
        self.train_btn.clicked.connect(self.start_training)
        train_layout.addWidget(self.train_btn)
        
        # ƒ∞lerleme √ßubuƒüu
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet(f"""
            QProgressBar {{
                border: 1px solid {AK_COLORS['GRAY']};
                border-radius: 4px;
                text-align: center;
            }}
            QProgressBar::chunk {{
                background-color: {AK_COLORS['SUCCESS']};
                border-radius: 3px;
            }}
        """)
        train_layout.addWidget(self.progress_bar)
        
        layout.addWidget(train_group)
        
        # Eƒüitilmi≈ü modeller listesi
        models_group = QGroupBox("Eƒüitilmi≈ü Modeller")
        models_group.setStyleSheet(f"""
            QGroupBox {{
                font-weight: bold;
                border: 2px solid {AK_COLORS['GRAY']};
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
            }}
        """)
        models_layout = QVBoxLayout(models_group)
        
        # Modeller tablosu
        self.models_table = QTableWidget()
        self.models_table.setColumnCount(4)
        self.models_table.setHorizontalHeaderLabels(["Model Adƒ±", "Eƒüitim Tarihi", "Y√ºz Sayƒ±sƒ±", "ƒ∞≈ülemler"])
        header = self.models_table.horizontalHeader()
        if header:
            header.setStretchLastSection(True)
        self.models_table.setAlternatingRowColors(True)
        self.models_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #ddd;
                font-weight: bold;
            }
        """)
        models_layout.addWidget(self.models_table)
        
        # Senkronizasyon butonu
        self.sync_btn = QPushButton("Modelleri Web'e Senkronize Et")
        self.sync_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {AK_COLORS['BLUE']};
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #1565C0;
            }}
        """)
        self.sync_btn.clicked.connect(self.sync_models)
        models_layout.addWidget(self.sync_btn)
        
        layout.addWidget(models_group)
        
        # Alt kƒ±sma bo≈üluk ekle
        layout.addStretch()
        
        self.selected_folder = None
    
    def select_folder(self):
        """Fotoƒüraf klas√∂r√º se√ß"""
        folder = QFileDialog.getExistingDirectory(self, "Fotoƒüraf Klas√∂r√º Se√ßin")
        if folder:
            self.selected_folder = folder
            self.folder_path_label.setText(f"Se√ßili: {folder}")
            self.folder_path_label.setStyleSheet("color: #333;")
    
    def start_training(self):
        """Model eƒüitimini ba≈ülat"""
        model_name = self.model_name_input.toPlainText().strip()
        if not model_name:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen model adƒ±nƒ± girin")
            return
        
        if not self.selected_folder:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen fotoƒüraf klas√∂r√ºn√º se√ßin")
            return
        
        # Model ID olu≈ütur
        model_id = f"model_{int(time.time())}"
        
        # UI'yi g√ºncelle
        self.train_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        
        # Worker thread ba≈ülat
        self.training_worker = ModelTrainingWorker(model_id, model_name, self.selected_folder)
        self.training_worker.progress.connect(self.update_training_progress)
        self.training_worker.finished.connect(self.training_finished)
        self.training_worker.error.connect(self.training_error)
        self.training_worker.start()
    
    def update_training_progress(self, message, percentage):
        """Eƒüitim ilerlemesini g√ºncelle"""
        self.progress_bar.setValue(percentage)
        self.progress_bar.setFormat(f"{message} ({percentage}%)")
    
    def training_finished(self, model_id, model_info):
        """Eƒüitim tamamlandƒ±"""
        global trained_models
        trained_models[model_id] = model_info
        
        self.train_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        self.model_name_input.clear()
        self.selected_folder = None
        self.folder_path_label.setText("Fotoƒüraf klas√∂r√º se√ßilmedi")
        self.folder_path_label.setStyleSheet("color: #666; font-style: italic;")
        
        self.refresh_models()
        QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"Model ba≈üarƒ±yla eƒüitildi!\n\nY√ºz sayƒ±sƒ±: {model_info['face_count']}\nFotoƒüraf sayƒ±sƒ±: {model_info['photo_count']}")
    
    def training_error(self, error_message):
        """Eƒüitim hatasƒ±"""
        self.train_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        QMessageBox.critical(self, "Hata", f"Model eƒüitimi ba≈üarƒ±sƒ±z:\n{error_message}")
    
    def refresh_models(self):
        """Modeller tablosunu yenile"""
        self.models_table.setRowCount(len(trained_models))
        
        for row, (model_id, model_info) in enumerate(trained_models.items()):
            # Model adƒ±
            self.models_table.setItem(row, 0, QTableWidgetItem(model_info['name']))
            
            # Eƒüitim tarihi
            date_obj = datetime.fromisoformat(model_info['date'])
            date_str = date_obj.strftime("%d.%m.%Y %H:%M")
            self.models_table.setItem(row, 1, QTableWidgetItem(date_str))
            
            # Y√ºz sayƒ±sƒ±
            self.models_table.setItem(row, 2, QTableWidgetItem(str(model_info['face_count'])))
            
            # ƒ∞≈ülemler butonu
            delete_btn = QPushButton("Sil")
            delete_btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {AK_COLORS['ERROR']};
                    color: white;
                    border: none;
                    border-radius: 3px;
                    padding: 4px 8px;
                    font-size: 12px;
                }}
                QPushButton:hover {{
                    background-color: #DC2626;
                }}
            """)
            delete_btn.clicked.connect(lambda checked, mid=model_id: self.delete_model(mid))
            self.models_table.setCellWidget(row, 3, delete_btn)
    
    def delete_model(self, model_id):
        """Model sil"""
        reply = QMessageBox.question(self, "Model Sil", 
                                   f"'{trained_models[model_id]['name']}' modelini silmek istediƒüinizden emin misiniz?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            try:
                # Model klas√∂r√ºn√º sil
                model_dir = f"./models/{model_id}"
                if os.path.exists(model_dir):
                    shutil.rmtree(model_dir)
                
                # Global listeden sil
                del trained_models[model_id]
                
                self.refresh_models()
                QMessageBox.information(self, "Ba≈üarƒ±lƒ±", "Model ba≈üarƒ±yla silindi")
            except Exception as e:
                QMessageBox.critical(self, "Hata", f"Model silinirken hata olu≈ütu:\n{str(e)}")
    
    def sync_models(self):
        """Modelleri web'e senkronize et"""
        if not trained_models:
            QMessageBox.warning(self, "Uyarƒ±", "Senkronize edilecek model bulunamadƒ±")
            return
        
        if sync_models_to_web():
            QMessageBox.information(self, "Ba≈üarƒ±lƒ±", f"{len(trained_models)} model web API'ye ba≈üarƒ±yla senkronize edildi")
        else:
            QMessageBox.critical(self, "Hata", "Model senkronizasyonu ba≈üarƒ±sƒ±z. Web API baƒülantƒ±sƒ±nƒ± kontrol edin.")

class RequestProcessingSection(QWidget):
    """ƒ∞stek ƒ∞≈üleme B√∂l√ºm√º"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.active_workers = {}
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # Ba≈ülƒ±k ve sistem bilgisi
        header_layout = QHBoxLayout()
        
        title = QLabel("ƒ∞stek ƒ∞≈üleme")
        title.setFont(QFont("Segoe UI", 18, QFont.Bold))
        title.setStyleSheet(f"color: {AK_COLORS['BLUE']}; margin-bottom: 10px;")
        header_layout.addWidget(title)
        
        # Processing info
        if device_info['cuda_available']:
            processing_info = f"‚ö° GPU Hƒ±zlandƒ±rma Aktif"
            color = AK_COLORS['SUCCESS']
        else:
            processing_info = f"üíª CPU ƒ∞≈üleme Modu"
            color = AK_COLORS['WARNING']
        
        processing_label = QLabel(processing_info)
        processing_label.setFont(QFont("Segoe UI", 11))
        processing_label.setStyleSheet(f"color: {color}; font-weight: bold;")
        header_layout.addStretch()
        header_layout.addWidget(processing_label)
        
        layout.addLayout(header_layout)
        
        # API durum bilgisi
        status_frame = QFrame()
        status_frame.setStyleSheet(f"""
            QFrame {{
                border: 1px solid {AK_COLORS['GRAY']};
                border-radius: 8px;
                background-color: {AK_COLORS['LIGHT_GRAY']};
                padding: 10px;
            }}
        """)
        status_layout = QHBoxLayout(status_frame)
        
        self.api_status_label = QLabel("API Durumu Kontrol Ediliyor...")
        self.api_status_label.setFont(QFont("Segoe UI", 12))
        status_layout.addWidget(self.api_status_label)
        
        self.refresh_btn = QPushButton("Yenile")
        self.refresh_btn.setStyleSheet(f"""
            QPushButton {{
                background-color: {AK_COLORS['BLUE']};
                color: white;
                border: none;
                border-radius: 4px;
                padding: 6px 12px;
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #1565C0;
            }}
        """)
        self.refresh_btn.clicked.connect(self.check_api_status)
        status_layout.addWidget(self.refresh_btn)
        
        layout.addWidget(status_frame)
        
        # ƒ∞≈ülem durumu
        processing_group = QGroupBox("Aktif ƒ∞≈ülemler")
        processing_group.setStyleSheet(f"""
            QGroupBox {{
                font-weight: bold;
                border: 2px solid {AK_COLORS['GRAY']};
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
            }}
        """)
        processing_layout = QVBoxLayout(processing_group)
        
        # ƒ∞≈ülemler tablosu
        self.requests_table = QTableWidget()
        self.requests_table.setColumnCount(5)
        self.requests_table.setHorizontalHeaderLabels(["TC No", "E-posta", "Durum", "ƒ∞lerleme", "Tarih"])
        header = self.requests_table.horizontalHeader()
        if header:
            header.setStretchLastSection(True)
        self.requests_table.setAlternatingRowColors(True)
        self.requests_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #ddd;
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }
            QTableWidget::item:selected {
                background-color: #e3f2fd;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 8px;
                border: none;
                border-bottom: 2px solid #ddd;
                font-weight: bold;
            }
        """)
        processing_layout.addWidget(self.requests_table)
        
        layout.addWidget(processing_group)
        
        # ƒ∞statistikler
        stats_group = QGroupBox("ƒ∞statistikler")
        stats_group.setStyleSheet(f"""
            QGroupBox {{
                font-weight: bold;
                border: 2px solid {AK_COLORS['GRAY']};
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }}
            QGroupBox::title {{
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 10px 0 10px;
            }}
        """)
        stats_layout = QHBoxLayout(stats_group)
        
        self.total_requests_label = QLabel("Toplam ƒ∞stek: 0")
        self.completed_requests_label = QLabel("Tamamlanan: 0")
        self.failed_requests_label = QLabel("Ba≈üarƒ±sƒ±z: 0")
        
        for label in [self.total_requests_label, self.completed_requests_label, self.failed_requests_label]:
            label.setFont(QFont("Segoe UI", 12))
            label.setStyleSheet("padding: 5px;")
            stats_layout.addWidget(label)
        
        layout.addWidget(stats_group)
        
        # Alt kƒ±sma bo≈üluk ekle
        layout.addStretch()
        
        # API durumunu kontrol et
        self.check_api_status()
    
    def check_api_status(self):
        """API baƒülantƒ± durumunu kontrol et"""
        if test_api_connection():
            self.api_status_label.setText("‚úÖ Web API Baƒülantƒ±sƒ± Aktif")
            self.api_status_label.setStyleSheet(f"color: {AK_COLORS['SUCCESS']};")
        else:
            self.api_status_label.setText("‚ùå Web API Baƒülantƒ±sƒ± Yok")
            self.api_status_label.setStyleSheet(f"color: {AK_COLORS['ERROR']};")
    
    def process_photo_request(self, request_data):
        """Fotoƒüraf i≈üleme isteƒüini ba≈ülat"""
        tc_number = request_data['tcNumber']
        
        # ƒ∞steƒüi tabloya ekle
        row = self.requests_table.rowCount()
        self.requests_table.insertRow(row)
        
        self.requests_table.setItem(row, 0, QTableWidgetItem(tc_number))
        self.requests_table.setItem(row, 1, QTableWidgetItem(request_data['email']))
        self.requests_table.setItem(row, 2, QTableWidgetItem("Ba≈ülƒ±yor..."))
        
        progress_bar = QProgressBar()
        progress_bar.setStyleSheet(f"""
            QProgressBar {{
                border: 1px solid {AK_COLORS['GRAY']};
                border-radius: 4px;
                text-align: center;
            }}
            QProgressBar::chunk {{
                background-color: {AK_COLORS['YELLOW']};
                border-radius: 3px;
            }}
        """)
        self.requests_table.setCellWidget(row, 3, progress_bar)
        
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.requests_table.setItem(row, 4, QTableWidgetItem(timestamp))
        
        # ƒ∞≈ülemi ba≈ülat
        self.start_photo_matching(tc_number, request_data, progress_bar, row)
    
    def start_photo_matching(self, tc_number, request_data, progress_bar, table_row):
        """Fotoƒüraf e≈üle≈ütirme i≈ülemini ba≈ülat"""
        try:
            # Web'den gelen y√ºz verilerini i≈üle
            reference_embeddings = []
            
            # Yeni format: faceData (web'den gelen embedding verileri)
            if 'faceData' in request_data and request_data['faceData']:
                for face_item in request_data['faceData']:
                    try:
                        if 'embedding' in face_item and face_item['embedding']:
                            embedding = np.array(face_item['embedding'], dtype=np.float32)
                            reference_embeddings.append(embedding)
                            print(f"‚úÖ Web'den embedding verisi alƒ±ndƒ± (boyut: {len(embedding)})")
                    except Exception as e:
                        print(f"Web embedding i≈üleme hatasƒ±: {str(e)}")
            
            # Eski format: referencePhotos (base64 fotoƒüraflar) - uyumluluk i√ßin
            elif 'referencePhotos' in request_data:
                for photo_b64 in request_data['referencePhotos']:
                    try:
                        # Base64'ten resme √ßevir
                        image_data = base64.b64decode(photo_b64.split(',')[1])  # data:image/jpeg;base64,... formatƒ±ndan
                        nparr = np.frombuffer(image_data, np.uint8)
                        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                        
                        # Y√ºz tespiti
                        faces = face_app.get(img) if face_app else None
                        if faces:
                            for face in faces:
                                reference_embeddings.append(face.embedding)
                    except Exception as e:
                        print(f"Referans fotoƒüraf i≈üleme hatasƒ±: {str(e)}")
            
            if not reference_embeddings:
                self.requests_table.setItem(table_row, 2, QTableWidgetItem("Hata: Y√ºz verisi bulunamadƒ±"))
                print("‚ùå Hi√ß embedding verisi bulunamadƒ±")
                return
                
            print(f"‚úÖ Toplam {len(reference_embeddings)} y√ºz embedding'i hazƒ±r")
            
            # E≈üle≈ütirme worker'ƒ±nƒ± ba≈ülat - selectedCampDays kullan
            selected_models = request_data.get('selectedCampDays', request_data.get('selectedModels', []))
            matching_worker = PhotoMatchingWorker(
                tc_number, 
                reference_embeddings, 
                request_data['email'], 
                selected_models
            )
            
            matching_worker.progress.connect(
                lambda msg, pct, tc: self.update_matching_progress(tc, msg, pct, progress_bar, table_row)
            )
            matching_worker.finished.connect(
                lambda tc, photos: self.matching_finished(tc, photos, table_row)
            )
            matching_worker.error.connect(
                lambda tc, error: self.matching_error(tc, error, table_row)
            )
            
            self.active_workers[tc_number] = matching_worker
            matching_worker.start()
            
        except Exception as e:
            self.requests_table.setItem(table_row, 2, QTableWidgetItem(f"Hata: {str(e)}"))
    
    def update_matching_progress(self, tc_number, message, percentage, progress_bar, table_row):
        """E≈üle≈ütirme ilerlemesini g√ºncelle"""
        progress_bar.setValue(percentage)
        self.requests_table.setItem(table_row, 2, QTableWidgetItem(message))
    
    def matching_finished(self, tc_number, matched_photos, table_row):
        """E≈üle≈ütirme tamamlandƒ± - E-posta g√∂ndermeye ba≈üla"""
        if not matched_photos:
            self.requests_table.setItem(table_row, 2, QTableWidgetItem("E≈üle≈üme bulunamadƒ±"))
            return
        
        self.requests_table.setItem(table_row, 2, QTableWidgetItem(f"{len(matched_photos)} fotoƒüraf bulundu - E-posta g√∂nderiliyor"))
        
        # E-posta worker'ƒ±nƒ± ba≈ülat
        email = None
        # Worker'dan email'i al
        for tc, worker in self.active_workers.items():
            if tc == tc_number:
                email = worker.email
                break
        
        if not email:
            self.requests_table.setItem(table_row, 2, QTableWidgetItem("‚ùå E-posta adresi bulunamadƒ±"))
            return
        
        email_worker = GoogleDriveSender(tc_number, email, matched_photos)
        email_worker.progress.connect(
            lambda tc, msg: self.update_email_progress(tc, msg, table_row)
        )
        email_worker.finished.connect(
            lambda tc, success: self.email_finished(tc, success, table_row)
        )
        
        email_worker.start()
        
        # Matching worker'ƒ±nƒ± temizle
        if tc_number in self.active_workers:
            worker = self.active_workers[tc_number]
            if hasattr(worker, 'stop'):
                worker.stop()
            del self.active_workers[tc_number]
    
    def update_email_progress(self, tc_number, message, table_row):
        """E-posta g√∂nderme ilerlemesini g√ºncelle"""
        self.requests_table.setItem(table_row, 2, QTableWidgetItem(message))
    
    def email_finished(self, tc_number, success, table_row):
        """E-posta g√∂nderimi tamamlandƒ±"""
        if success:
            self.requests_table.setItem(table_row, 2, QTableWidgetItem("‚úÖ Tamamlandƒ±"))
            progress_bar = self.requests_table.cellWidget(table_row, 3)
            if progress_bar:
                progress_bar.setValue(100)
        else:
            self.requests_table.setItem(table_row, 2, QTableWidgetItem("‚ùå E-posta hatasƒ±"))
        
        # Worker'ƒ± temizle
        if tc_number in self.active_workers:
            del self.active_workers[tc_number]
    
    def matching_error(self, tc_number, error_message, table_row):
        """E≈üle≈ütirme hatasƒ±"""
        self.requests_table.setItem(table_row, 2, QTableWidgetItem(f"‚ùå Hata: {error_message}"))
        
        # Worker'ƒ± g√ºvenli durdur ve temizle
        if tc_number in self.active_workers:
            worker = self.active_workers[tc_number]
            if hasattr(worker, 'stop'):
                worker.stop()
            del self.active_workers[tc_number]
    
    def stop_all_workers(self):
        """T√ºm aktif worker'larƒ± g√ºvenli durdur"""
        for tc_number, worker in list(self.active_workers.items()):
            try:
                if hasattr(worker, 'stop'):
                    worker.stop()
                if worker.isRunning():
                    worker.quit()
                    worker.wait(3000)  # 3 saniye bekle
                    if worker.isRunning():
                        worker.terminate()  # Force terminate if still running
            except Exception as e:
                print(f"Worker durdurma hatasƒ± - {tc_number}: {str(e)}")
        
        self.active_workers.clear()
        print("‚úÖ T√ºm worker'lar g√ºvenli durduruldu")

class MainWindow(QMainWindow):
    """Ana pencere - ƒ∞ki b√∂l√ºml√º tasarƒ±m"""
    
    def __init__(self):
        super().__init__()
        self.setup_ui()
        self.setup_database_connection()
        
        # Otomatik istek kontrol timer'ƒ±
        self.request_timer = QTimer()
        self.request_timer.timeout.connect(self.check_new_requests)
        self.request_timer.start(10000)  # 10 saniyede bir kontrol
        
        self.processed_requests = set()  # ƒ∞≈ülenmi≈ü istekleri takip et
        
        # Reference to request processing section for cleanup
        self.request_section = None
    
    def closeEvent(self, a0):
        """Uygulama kapatƒ±lƒ±rken g√ºvenli cleanup"""
        print("üîÑ Uygulama kapatƒ±lƒ±yor - Aktif i≈ülemler durduruluyor...")
        
        try:
            # Timer'ƒ± durdur
            if hasattr(self, 'request_timer') and self.request_timer:
                self.request_timer.stop()
            
            # Request section'daki worker'larƒ± durdur
            if self.request_section and hasattr(self.request_section, 'stop_all_workers'):
                self.request_section.stop_all_workers()
            
            print("‚úÖ G√ºvenli cleanup tamamlandƒ±")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Cleanup sƒ±rasƒ±nda hata: {str(e)}")
        
        if a0:
            a0.accept()
    
    def setup_ui(self):
        """Ana aray√ºz√º kur"""
        self.setWindowTitle("AK Parti Gen√ßlik Kollarƒ± - Kamp Fotoƒüraf Sistemi")
        self.setMinimumSize(1400, 800)
        
        # Merkezi widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Ana layout - yatay b√∂l√ºnm√º≈ü
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(1)
        
        # Splitter - iki b√∂l√ºm
        splitter = QSplitter(Qt.Orientation.Horizontal)
        splitter.setStyleSheet("""
            QSplitter::handle {
                background-color: #ddd;
                width: 2px;
            }
            QSplitter::handle:hover {
                background-color: #bbb;
            }
        """)
        
        # Sol b√∂l√ºm - Model Eƒüitimi
        self.training_section = ModelTrainingSection()
        training_frame = QFrame()
        training_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {AK_COLORS['WHITE']};
                border-right: 1px solid #ddd;
            }}
        """)
        training_layout = QVBoxLayout(training_frame)
        training_layout.setContentsMargins(0, 0, 0, 0)
        training_layout.addWidget(self.training_section)
        
        # Saƒü b√∂l√ºm - ƒ∞stek ƒ∞≈üleme
        self.processing_section = RequestProcessingSection()
        self.request_section = self.processing_section  # Reference for cleanup
        processing_frame = QFrame()
        processing_frame.setStyleSheet(f"""
            QFrame {{
                background-color: {AK_COLORS['WHITE']};
            }}
        """)
        processing_layout = QVBoxLayout(processing_frame)
        processing_layout.setContentsMargins(0, 0, 0, 0)
        processing_layout.addWidget(self.processing_section)
        
        # Splitter'a ekle
        splitter.addWidget(training_frame)
        splitter.addWidget(processing_frame)
        splitter.setSizes([700, 700])  # E≈üit boyutlarda ba≈ülat
        
        main_layout.addWidget(splitter)
        
        # Pencereyi maksimize et
        self.showMaximized()
    
    def setup_database_connection(self):
        """Veritabanƒ± baƒülantƒ±sƒ±nƒ± kur"""
        # Web API'den veritabanƒ± bilgilerini al
        self.db_config = {
            'web_api_url': CONFIG.get('WEB_API_URL', 'http://localhost:5000')
        }
        print(f"üìä Veritabanƒ± baƒülantƒ±sƒ± kuruldu: {self.db_config['web_api_url']}")
    
    def process_photo_request(self, request_data):
        """Fotoƒüraf i≈üleme isteƒüini i≈üle"""
        self.processing_section.process_photo_request(request_data)
    
    def check_new_requests(self):
        """Yeni fotoƒüraf isteklerini kontrol et"""
        try:
            # Web API'den yeni istekleri al (Python GUI endpoint'i)
            response = requests.get(
                f"{self.db_config['web_api_url']}/api/python/photo-requests", 
                headers={'Authorization': 'Bearer python-gui-token'}, 
                timeout=5
            )
            if response.status_code == 200:
                requests_data = response.json()
                
                for request_item in requests_data:
                    request_id = request_item['id']
                    
                    # Bu istek daha √∂nce i≈ülenmi≈ü mi?
                    if request_id not in self.processed_requests:
                        self.processed_requests.add(request_id)
                        
                        # ƒ∞steƒüi i≈üleme kuyruƒüuna ekle
                        photo_request = {
                            'tcNumber': request_item['tcNumber'],
                            'email': request_item['email'],
                            'faceData': request_item.get('faceData', []),  # Web'den gelen y√ºz verileri
                            'selectedModels': [],  # Kamp g√ºnlerinden √ßevirece
                            'selectedCampDays': request_item.get('selectedCampDays', []),
                            'timestamp': request_item['createdAt'],
                            'source': 'web_database'
                        }
                        
                        print(f"‚ú® Yeni istek web veritabanƒ±ndan alƒ±ndƒ±: {request_item['tcNumber']}")
                        print(f"üìä Debug - Alƒ±nan veri:")
                        print(f"   - TC: {request_item['tcNumber']}")
                        print(f"   - Email: {request_item['email']}")
                        print(f"   - Face Data: {len(request_item.get('faceData', []))} adet")
                        print(f"   - Raw Face Data: {request_item.get('faceData', 'YOK')}")
                        self.process_photo_request(photo_request)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Veritabanƒ± kontrol√º hatasƒ±: {str(e)}")

# API server sƒ±nƒ±flarƒ± kaldƒ±rƒ±ldƒ± - sadece GUI kullanƒ±lacak

def main():
    """Ana fonksiyon"""
    # Konsol parametresi kontrol√º
    console_mode = '--console' in sys.argv or '-c' in sys.argv
    
    if console_mode:
        print("üíª Konsol parametresi tespit edildi")
        print("üìù Konsol bilgileri g√∂steriliyor...")
        
    print("üéØ AK Parti Gen√ßlik Kollarƒ± Fotoƒüraf E≈üle≈ütirme Sistemi")
    print("üîß GUI modu ba≈ülatƒ±lƒ±yor...")
    
    # PyQt5 uygulamasƒ±nƒ± ba≈ülat
    app = QApplication(sys.argv)
    
    # AK Parti temasƒ±nƒ± uygula
    app.setStyle('Fusion')
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(255, 255, 255))
    palette.setColor(QPalette.WindowText, QColor(31, 41, 55))
    palette.setColor(QPalette.Base, QColor(255, 255, 255))
    palette.setColor(QPalette.AlternateBase, QColor(249, 250, 251))
    palette.setColor(QPalette.ToolTipBase, QColor(255, 255, 255))
    palette.setColor(QPalette.ToolTipText, QColor(31, 41, 55))
    palette.setColor(QPalette.Text, QColor(31, 41, 55))
    palette.setColor(QPalette.Button, QColor(255, 255, 255))
    palette.setColor(QPalette.ButtonText, QColor(31, 41, 55))
    palette.setColor(QPalette.BrightText, QColor(239, 68, 68))
    palette.setColor(QPalette.Link, QColor(30, 136, 229))
    palette.setColor(QPalette.Highlight, QColor(245, 158, 11))
    palette.setColor(QPalette.HighlightedText, QColor(255, 255, 255))
    app.setPalette(palette)
    
    # Font ayarla
    font = QFont("Segoe UI", 10)
    app.setFont(font)
    
    # Y√ºz analizi sistemini ba≈ülat
    if not init_face_analysis():
        QMessageBox.critical(None, "Hata", "Y√ºz analizi sistemi ba≈ülatƒ±lamadƒ±!")
        sys.exit(1)
    
    # Eƒüitilmi≈ü modelleri y√ºkle
    load_trained_models()
    
    if console_mode:
        print(f"üìÅ Eƒüitilmi≈ü modeller y√ºklendi: {len(trained_models)} adet")
        print("‚úÖ Sistem hazƒ±r - GUI a√ßƒ±lƒ±yor...")
    
    # Ana pencereyi g√∂ster
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()